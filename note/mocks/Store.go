// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	note "noteapp/note"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Store) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, p
func (_m *Store) Fetch(ctx context.Context, p *note.Pagination) (note.Iterator, error) {
	ret := _m.Called(ctx, p)

	var r0 note.Iterator
	if rf, ok := ret.Get(0).(func(context.Context, *note.Pagination) note.Iterator); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(note.Iterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *note.Pagination) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *Store) Get(ctx context.Context, id uuid.UUID) (*note.Note, error) {
	ret := _m.Called(ctx, id)

	var r0 *note.Note
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *note.Note); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*note.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, n
func (_m *Store) Insert(ctx context.Context, n *note.Note) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *note.Note) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, n
func (_m *Store) Update(ctx context.Context, n *note.Note) (*note.Note, error) {
	ret := _m.Called(ctx, n)

	var r0 *note.Note
	if rf, ok := ret.Get(0).(func(context.Context, *note.Note) *note.Note); ok {
		r0 = rf(ctx, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*note.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *note.Note) error); ok {
		r1 = rf(ctx, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
