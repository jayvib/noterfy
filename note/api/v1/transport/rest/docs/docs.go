// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Jayson Vibandor",
            "email": "jayson.vibandor@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/note": {
            "put": {
                "description": "Updating an existing note. If the note to be updated is not found the API will respond a NotFound status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update an existing note.",
                "parameters": [
                    {
                        "description": "A body containing the updated note",
                        "name": "UpdateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the note",
                        "schema": {
                            "$ref": "#/definitions/rest.UpdateResponse"
                        }
                    },
                    "404": {
                        "description": "Note to be update is not found in the service",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "499": {
                        "description": "Cancel error when the request was aborted",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creating a new note. The client can assign the note ID with a UUID value but the service will return a conflict error when the note with the ID provided is already exists.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new note.",
                "parameters": [
                    {
                        "description": "A body containing the new note",
                        "name": "CreateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rest.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created a new note",
                        "schema": {
                            "$ref": "#/definitions/rest.CreateResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict error due to the new note with an ID already exists in the service",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "499": {
                        "description": "Cancel error when the request was aborted",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/note/{id}": {
            "get": {
                "description": "Get the note from the service if exists. When the note is not exists it will return a NotFound response status.",
                "summary": "Get the note from the service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the note",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful getting the note",
                        "schema": {
                            "$ref": "#/definitions/rest.GetResponse"
                        }
                    },
                    "400": {
                        "description": "Note's ID parameter is not provided in the path",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Note is not found in the service",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "499": {
                        "description": "Cancel error when the request was aborted",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server internal error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing note.",
                "summary": "Delete an existing note.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the note",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deleting a note",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Note's ID parameter is not provided in the path",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "499": {
                        "description": "Cancel error when the request was aborted",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server internal error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        },
        "/notes": {
            "get": {
                "description": "Fetches notes from the service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetches notes from the service.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The page number of the fetch pagination. Default is page=1.",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The page size of the fetch pagination. Default is size=25.",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "An option for sorting the notes in the response. Default is sort_by=title. [title/id/created_date]",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "An option for sorting the results in ascending or descending. Default is ascending=true",
                        "name": "ascending",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetches notes",
                        "schema": {
                            "$ref": "#/definitions/rest.FetchResponse"
                        }
                    },
                    "499": {
                        "description": "Cancel error when the request was aborted",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Unexpected server internal error",
                        "schema": {
                            "$ref": "#/definitions/rest.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "note.Note": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the content of the note",
                    "type": "string",
                    "example": "Writing an effective note is hard"
                },
                "created_time": {
                    "description": "CreatedTime is the timestamp when the note was created.",
                    "type": "string",
                    "example": "2016-02-24 11:12:13"
                },
                "id": {
                    "description": "ID is a unique identifier UUID of the note.",
                    "type": "string",
                    "example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
                },
                "is_favorite": {
                    "description": "IsFavorite is a flag when then the note is marked as favorite",
                    "type": "boolean",
                    "example": true
                },
                "title": {
                    "description": "Title is the title of the note",
                    "type": "string",
                    "example": "How to Write a Note"
                },
                "updated_time": {
                    "description": "UpdateTime is the timestamp when the note last updated.",
                    "type": "string",
                    "example": "2016-02-24 11:12:13"
                }
            }
        },
        "rest.CreateRequest": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/note.Note"
                }
            }
        },
        "rest.CreateResponse": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/note.Note"
                }
            }
        },
        "rest.FetchResponse": {
            "type": "object",
            "properties": {
                "notes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/note.Note"
                    }
                },
                "total_count": {
                    "type": "integer",
                    "example": 2
                },
                "total_page": {
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "rest.GetResponse": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/note.Note"
                }
            }
        },
        "rest.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Note not found"
                }
            }
        },
        "rest.UpdateRequest": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/note.Note"
                }
            }
        },
        "rest.UpdateResponse": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/note.Note"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Use to interact to the Noterfy note service.",
            "name": "Note API"
        }
    ]
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.2.1",
	Host:        "localhost:8080",
	BasePath:    "/v1",
	Schemes:     []string{"http", "https"},
	Title:       "Noterfy Note Service",
	Description: "Noterfy Note Service.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
